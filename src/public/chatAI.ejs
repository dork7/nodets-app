<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>ChatAI Window</title>
    <style>
        body {
            background: #37353E;
            color: #D3DAD9;
            font-family: 'Segoe UI', Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        #chat-container {
            background: #44444E;
            max-width: 70vw;
            margin: 40px auto;
            background: #23272f;
            border-radius: 16px;
            box-shadow: 0 4px 24px rgba(0,0,0,0.7);
            padding: 24px 16px 16px 16px;
            display: flex;
            flex-direction: column;
            height: 70vh;
        }
        #messages {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 18px;
            padding-right: 6px;
            display: flex;
            flex-direction: column;
        }
        .message {
            display: block;
            margin-bottom: 12px;
            padding: 10px 16px;
            border-radius: 18px;
            max-width: 80%;
            word-break: break-word;
            box-shadow: 0 2px 8px rgba(0,0,0,0.12);
            position: relative;
            font-size: 1rem;
            line-height: 1.5;
            background: #44444E;
            color: #D3DAD9;
        }
        .message.user {
            background: #2c2f36;
            color: #e0e0e0;
            align-self: flex-end;
            border-bottom-right-radius: 4px;
            text-align: right;
        }
        .message.ai {
            /* background: #144ac9;
            color: #ffffff;
            align-self: flex-start;
            border-bottom-left-radius: 4px;
            text-align: left; */
            
        }
        .message.ai pre, .message.ai pre code {
            background: #181a20;
            color: #80cbc4;
            font-family: 'Fira Mono', 'Consolas', monospace;
            font-size: 0.98em;
            border-radius: 8px;
            padding: 8px 12px;
            overflow-x: auto;
            margin: 8px 0;
            display: block;
        }
        .message.ai code {
            background: #181a20;
            color: #80cbc4;
            font-family: 'Fira Mono', 'Consolas', monospace;
            font-size: 0.98em;
            border-radius: 8px;
            padding: 4px 6px;
            overflow-x: auto;
            margin: 4px 0;
        }
        .message.ai strong {
            color: #ffd700;
            font-weight: bold;
        }
        .message.ai em {
            color: #80cbc4;
            font-style: italic;
        }
        .message.ai a {
            color: #4fc3f7;
            text-decoration: underline;
        }
        .message.system {
            background: #444;
            color: #ffd700;
            text-align: left;
            font-size: 0.95em;
            border-radius: 12px;
            margin: 8px 0 8px 0;
            max-width: 60%;
            align-self: flex-start;
        }
        #input-form {
            display: flex;
            gap: 8px;
            margin-top: 8px;
        }
        #input {
            flex: 1;
            padding: 10px 14px;
            border-radius: 8px;
            border: none;
            background: #222;
            color: #e0e0e0;
            font-size: 1em;
            outline: none;
            box-shadow: 0 1px 4px rgba(0,0,0,0.15);
        }
        #input:focus {
            background: #2a2a2a;
        }
        #send {
            background: #222;
            color: #e0e0e0;
            border: none;
            border-radius: 8px;
            padding: 10px 18px;
            font-size: 1em;
            cursor: pointer;
            transition: background 0.2s;
        }
        #send:hover {
            background: #333;
        }
        a {
            color: #80cbc4;
            text-decoration: underline;
        }

        #model-selector-container {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-right: 12px;
        }
        #model-selector {
            display: flex;
            gap: 6px;
        }
        .model-btn {
            background: #23272f;
            color: #ffd700;
            border: 1.5px solid #144ac9;
            border-radius: 8px;
            padding: 7px 14px;
            font-size: 1em;
            cursor: pointer;
            transition: background 0.2s, color 0.2s, border 0.2s;
            outline: none;
        }
        .model-btn[aria-pressed="true"] {
            background: #144ac9;
            color: #fff;
            border-color: #ffd700;
            font-weight: bold;
        }
        .model-btn:focus {
            box-shadow: 0 0 0 2px #ffd70055;
        }
    </style>


 
</head>
<body>
    <div id="chat-container">
        <div id="messages"></div>
        <form id="input-form">
            <!-- Streaming Toggle Button -->
            <input id="input" autocomplete="off" placeholder="Type your message..." />
            <div style="display: flex; align-items: center;">
                <label style="display: flex; align-items: center; gap: 8px; font-size: 1em; color: #ffd700; cursor: pointer;">
                    <span style="margin-right: 4px;" id="streaming-label">Streaming</span>
                   
                    <span style="position: relative; display: inline-block; width: 40px; height: 22px;">
                        <input type="checkbox" id="stream-toggle" checked style="opacity:0; width:0; height:0;">
                        <span style="
                            position: absolute;
                            cursor: pointer;
                            top: 0; left: 0; right: 0; bottom: 0;
                            background-color: #44444E;
                            border-radius: 22px;
                            transition: background 0.2s;
                            border: 1.5px solid #144ac9;
                        "></span>
                        <span style="
                            position: absolute;
                            left: 2px; top: 2px;
                            width: 18px; height: 18px;
                            background: #ffd700;
                            border-radius: 50%;
                            transition: transform 0.2s;
                            box-shadow: 0 1px 4px rgba(0,0,0,0.15);
                        "></span>
                    </span>
                </label>
                <style>
                    #stream-toggle + span {
                        background-color: #44444E;
                    }
                    #stream-toggle:checked + span {
                        background-color: #144ac9;
                    }
                    #stream-toggle + span + span {
                        transform: translateX(0);
                    }
                    #stream-toggle:checked + span + span {
                        transform: translateX(18px);
                    }
                </style>
            </div>
            <button id="send" type="submit">Send</button>
            <div id="model-selector-container">
                <label for="model-selector" style="color: #ffd700; font-size: 1em; margin-right: 8px;">AI Model:</label>
                <div id="model-selector"></div>
            </div>
            <style>
            
            </style>
       
        </form>
    </div>
    <script nonce="abc123">


    


 
                let selectedModel = ''

                document.addEventListener('DOMContentLoaded',async  function() {

                let aiModels = [];

                try {
                const res = await fetch('http://localhost:2020/chatModels');
                const {models} = await res.json();
                if (Array.isArray(models) && models.length > 0) {
                    console.log('Fetched models: ', models);
                    aiModels = models
                  
                    selectedModel = aiModels[1].value;
                }
                } catch (e) {
                // fallback to default models if fetch fails
                console.error('Error fetching models, using defaults.', e);
                }

                const modelSelector = document.getElementById('model-selector');
                modelSelector.innerHTML = aiModels.map((m, i) =>
                    `<button type="button" class="model-btn" data-model="${m.value}" aria-pressed="${i === 1 ? 'true' : 'false'}">${m.label}</button>`
                ).join('');
                const modelBtns = modelSelector.querySelectorAll('.model-btn');
                modelBtns.forEach(btn => {
                    btn.addEventListener('click', function() {
                        modelBtns.forEach(b => b.setAttribute('aria-pressed', 'false'));
                        btn.setAttribute('aria-pressed', 'true');
                        selectedModel = btn.getAttribute('data-model');
                    });
                });
                });
          

            const toggle = document.getElementById('stream-toggle');
            const label = document.getElementById('streaming-label');
            function updateLabel() {
                label.textContent = toggle.checked ? 'Streaming' : 'No Streaming';
            }
            toggle.addEventListener('change', updateLabel);
            updateLabel();

        let streamingEnabled = false;
        document.addEventListener('DOMContentLoaded', function() {
            const toggle = document.getElementById('stream-toggle');
            toggle.checked = streamingEnabled;
            toggle.addEventListener('change', function() {
                streamingEnabled = toggle.checked;
            });
        
        });

        // Replace with your server's WebSocket endpoint
        let socket = null;
        let isConnected = false;
        let timer = null;
        let loadingDotCount = 0;
        const sessionId = 'sess-' + Math.random().toString(36).substr(2, 9);
        document.title = `ChatAI Session| ${sessionId}`;
        const messages = document.getElementById('messages');
        const form = document.getElementById('input-form');
        const input = document.getElementById('input');
        let isStreaming = false;
        let combinedContent = '';
        function connectWebSocket() {
            socket = new WebSocket('ws://localhost:2020/ws/chatAI');
            socket.addEventListener('open', function () {
                appendMessage('System', 'Connected to chat server.', 'system');
                isConnected = true;
            });
            socket.addEventListener('message', function (event) {
                const data = JSON.parse(event.data);
                console.log('Message from server ', event.data);
                const displayValue = processStream(data);
                console.log('Display Value: ', displayValue);
                const lastMsg = messages.lastElementChild;
                if (lastMsg && lastMsg.classList.contains(data.sender === 'AI' ? 'ai' : 'user')) {
                    lastMsg.innerHTML = `<strong>${data.sender}:</strong> ${parseMarkdown(displayValue)}`;
                    messages.scrollTop = messages.scrollHeight;
                } else {
                    appendMessage(data.sender, displayValue, data.sender === 'AI' ? 'ai' : 'user');
                }
            });
            socket.addEventListener('close', function () {
                appendMessage('System', 'Disconnected from chat server.', 'system');
                isConnected = false;
                setTimeout(() => {
                    appendMessage('System', 'Reconnecting...', 'system');
                    if (!isConnected) {
                        connectWebSocket();
                    }
                }, 5000);
            });
        }
        connectWebSocket();
        form.addEventListener('submit', function (e) {
            e.preventDefault();
            const msg = input.value.trim();
            if (msg) {
                socket.send(JSON.stringify({ 
                    sender: 'User', 
                    type: 'request', 
                    id: sessionId, 
                    method: 'chatAI',
                    stream:streamingEnabled, 
                    model : selectedModel,
                    params: { prompt: msg } 
                }));
                appendMessage('You', msg, 'user');
                input.value = '';
            }
        });
        function appendMessage(sender, message, type) {
            const div = document.createElement('div');
            div.className = 'message ' + type;
            div.innerHTML = `<strong>${sender}:</strong> ${message}`;
            messages.appendChild(div);
            messages.scrollTop = messages.scrollHeight;
        }
        function parseMarkdown(text) {
            // Basic Markdown parsing: bold, italics, code, links, line breaks
            return text
                .replace(/(?:__|\*\*)(.*?)\1/g, '<strong>$1</strong>') // bold
                .replace(/(?:_|\*)(.*?)\1/g, '<em>$1</em>') // italics
                .replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>') // code blocks
                .replace(/`([^`]+)`/g, '<code>$1</code>') // inline code
                .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>') // links
                .replace(/\n/g, '<br>') // line breaks
        }
        function processStream(jsonLines) {
            const obj = jsonLines;
            console.log('Processing stream: ', obj);
            if (obj.type === 'stream_start') {
                isStreaming = true;
                combinedContent = '';
                loadingDotCount = 0;
                console.log('Loading...');
                return 'Loading...';
            } else if (obj.type === 'stream_continue' && isStreaming) {
                combinedContent += obj.aiResponse.content;
                return combinedContent;
            } else if (obj.type === 'stream_end' && isStreaming) {
                isStreaming = false;
                loadingDotCount = 0;
                return combinedContent;
            }
        }
    </script>
</body>
</html>